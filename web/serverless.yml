service: discord-betting

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["DiscordBettingDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    DB_TABLE: ${self:custom.discordBettingTableName}
    USERS_TABLE: ${self:custom.usersTableName}

#functions:
  #app:
    #handler: index.handler
    #events: 
      #- http: ANY /
      #- http: 'ANY {proxy+}'
  #take_bet:
    #handler: index.handler
    #events:
      #- http: 'POST /take_bet'
  #new_bet:
    #handler: index.handler
    #events:
      #- http: 'PUT /new_bet'
  #active_bets:
    #handler: index.handler
    #events:
      #- http: 'GET /active_bets'
  #balances:
    #handler: index.handler
    #events:
      #- http: 'GET /balances'
  #game_ended:
    #handler: index.handler
    #events:
      #- http: 'POST /game_ended'

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.usersTableName}
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DiscordBettingDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.discordBettingTableName}
        KeySchema:
          - AttributeName: betId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: betId
            AttributeType: N
          - AttributeName: active
            AttributeType: S
          - AttributeName: betTargetUserId
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes: 
          - IndexName: ActiveBetsIndex
            KeySchema:
              - AttributeName: active
                KeyType: HASH
              - AttributeName: betTargetUserId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  discordBettingTableName: 'discord-betting-table-${self:provider.stage}'
  usersTableName: 'users-table-${self:provider.stage}'
  dynamodb:
    start:
      migrate: true
